"""Application configuration settings."""

from functools import lru_cache

try:  # pragma: no cover - compatibility shim for pydantic v1/v2
    from pydantic_settings import BaseSettings, SettingsConfigDict  # type: ignore
except ModuleNotFoundError:  # pragma: no cover - fallback for pydantic v1
    from pydantic import BaseSettings  # type: ignore
    SettingsConfigDict = None  # type: ignore[misc]

from pydantic import Field


class Settings(BaseSettings):
    """Application configuration values loaded from environment variables."""

    database_url: str = Field(
        description="Database connection URL.",
    )
    secret_key: str = Field(
        description="Secret key for signing JWT tokens"
    )
    access_token_expire_minutes: int = Field(
        description="Number of minutes before access tokens expire"
    )
    sendgrid_api_key: str | None = Field(
        description="SendGrid API key used for sending transactional emails via the REST API",
    )
    sendgrid_sender: str | None = Field(
        description="Email address that will appear as the sender of transactional messages",
    )
    openai_api_key: str | None = Field(
        description="OpenAI API key used to authenticate requests to the language model service",
    )
    openai_model: str = Field(
        default="gpt-4.1-mini",
        description="Default OpenAI model identifier used for structured assistant responses",
    )
    openai_base_url: str | None = Field(
        default=None,
        description="Optional custom base URL for the OpenAI compatible API",
    )
    openai_temperature: float = Field(
        description="Sampling temperature for OpenAI structured responses",
        ge=0.0,
        le=2.0,
    )
    openai_max_output_tokens: int | None = Field(
        description="Optional limit for the number of tokens generated by the assistant",
    )

    if "SettingsConfigDict" in globals() and SettingsConfigDict is not None:
        model_config = SettingsConfigDict(
            env_file=".env",
            env_file_encoding="utf-8",
        )
    else:  # pragma: no cover - compatibility path for pydantic v1
        class Config:
            env_file = ".env"
            env_file_encoding = "utf-8"


@lru_cache
def get_settings() -> Settings:
    """Return cached application settings instance."""

    return Settings()
